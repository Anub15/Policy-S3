Description: Creatring Ec2 and VPC Services
Resources:
Description: Creating Services AWS VPC
Resources:
  ### VPC Creation.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 11.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VPC-Bedu
   ## Creation Public Subnets.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      CidrBlock: 11.0.16.0/20
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Subnet-Public-A
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      CidrBlock: 11.0.32.0/20
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Subnet-Public-B
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
  ## Creation Private Subnets.
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      CidrBlock: 11.0.48.0/20
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Subnet-Private-A
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      CidrBlock: 11.0.64.0/20
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Subnet-Private-B
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
  ## Public Routing Table Creation.
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    DependsOn:
        - VPC
        - PublicSubnet1
        - PublicSubnet2
        - Igw
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Public Route Table
  RouteTablePublicAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      SubnetId:
        Ref: PublicSubnet1
  RouteTablePublicAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      SubnetId:
        Ref: PublicSubnet2
  RouteTablePublicRoute0:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: RouteTablePublic
      GatewayId:
        Ref: Igw
  ## Private Routing Table Creation.
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    DependsOn:
        - VPC
        - PrivateSubnet1
        - PrivateSubnet2
        - NatGw
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Private Route Table
  RouteTablePrivate1Association1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      SubnetId:
        Ref: PrivateSubnet1
  RouteTablePrivate2Association2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      SubnetId:
        Ref: PrivateSubnet2
  RouteTablePrivate1Route0:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: RouteTablePrivate
      NatGatewayId:
        Ref: NatGw
  ## Internet gateway creation
  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IG-Bedu
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: Igw
  ## Nat gateway creation
  NatGw:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      AllocationId:
        Fn::GetAtt:
          - NatGw1ElasticIP
          - AllocationId
      Tags:
        - Key: Name
          Value: Nat Gateway Bedu
  ## Create Ip Elastica to Nat-Gateway.
  NatGw1ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: IP Nat Gateway Bedu
    ## Creating Key
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: Webserver-Bedu
  ## EC2 Createing Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
        - VPC
        - PrivateSubnet1
        - PrivateSubnet2
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  ## Creating WebServer A
  Ec2InstanceA:
    Type: AWS::EC2::Instance
    DependsOn:
        - VPC
        - PrivateSubnet1
        - PrivateSubnet2
        - PublicSubnet1
        - PublicSubnet2
    Properties:
      ImageId: ami-090fa75af13c156b4
      InstanceType: t3.micro
      KeyName: !Ref KeyPair
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: EC2-WebServices-A-Bedu
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            DeleteOnTermination: true
            VolumeType: gp3
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Web Page A" > /var/www/html/index.html
  ## Creating WebServer B
  Ec2InstanceB:
    Type: AWS::EC2::Instance
    DependsOn:
        - VPC
        - PrivateSubnet1
        - PrivateSubnet2
        - PublicSubnet1
        - PublicSubnet2
    Properties:
      ImageId: ami-090fa75af13c156b4
      InstanceType: t3.micro
      KeyName: !Ref KeyPair
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: EC2-WebServices-B-Bedu
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            DeleteOnTermination: true
            VolumeType: gp3
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Web Page B" > /var/www/html/index.html

  ## Cross-Stack References
Outputs:
  KeyPair:
    Description: Creating Key .Pem
    Value: !Ref KeyPair
    Export:
      Name: KeyPair
  EC2SecurityGroup:
    Description: EC2 Createing Security Group
    Value: !Ref EC2SecurityGroup
    Export:
      Name: EC2SecurityGroup
  Ec2InstanceA:
    Description: Creating EC2 Instance
    Value: !Ref Ec2InstanceA
    Export:
      Name: Ec2InstanceA
  Ec2InstanceB:
    Description: Creating EC2 Instance
    Value: !Ref Ec2InstanceB
    Export:
      Name: Ec2InstanceB
  VPC:
    Description: Creating VPC ID
    Value: !Ref VPC
    Export:
      Name: VPC
  PrivateSubnet1:
    Description: Creating Private Subnet A ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnet1
  PrivateSubnet2:
    Description: Creating Private Subnet B ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnet2
  PublicSubnet1:
    Description: Creating Public Subnet A ID
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1
  PublicSubnet2:
    Description: Creating Public Subnet B ID
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2
